<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mushroom</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_powerupparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A mushroom, get healthy!

//Call inherited event.
event_inherited();

//Set the horizontal speed
if (hspeed == 0) 
&amp;&amp; ((place_meeting(x,y+1,obj_semisolid))
|| (place_meeting(x,y+1,obj_slopeparent))) {

    if (!instance_exists(obj_mario))
    &amp;&amp; (obj_mario.x &lt; x)
        hspeed = -1;
    else
        hspeed = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn Mario into Big Mario

//Play 'Powerup' sound.
audio_play_sound(snd_powerup, 0, false);

//Get 1000 points
with (instance_create(x,y,obj_score)) event_user(5);

//If health mode is NOT active.
if (global.healthmode == false) {

    //If Mario is small.
    if (global.powerup == cs_small) {
    
        //Turn Mario into 'Super' Mario.
        global.powerup = cs_big;
        
        //Perform animation sequence
        with (instance_create(0,0,obj_mario_transform))
            sequence = 0;
    }
    
    //Otherwise, get a reserve mushroom
    else {
    
        //If NO item is in reserve.
        if (global.reserveitem = cs_small)
            global.reserveitem = cs_big;
    }
}

//Otherwise, if health mode is active.
else if (global.healthmode == true) {

    health++;
    if (health &gt; 4)
        health = 4;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor / ceiling collisions

//When moving down
if (vspeed &gt; 0) {

    //Check for a semisolid below
    var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_semisolid,0,0);

    //Handle semisolid collisions
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
        y = semisolid.bbox_top-16;

    //Cap fall speed
    if (!swimming) //If not swimming.
    &amp;&amp; (vspeed &gt; 4)
        vspeed = 4;
    
    //Otherwise, if swimming.
    else if (swimming)
    &amp;&amp; (vspeed &gt; 1)
        vspeed = 1;
}

//Embed into the slope to ensure correct slope mechanics
if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+4,obj_slopeparent,1,0))
and (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_slopeparent,1,0))
and (vspeed = 0)
    y += 4;

///Handle slope collisions
if (collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0))
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-8,bbox_right,bbox_bottom-8,obj_slopeparent,1,0)) {

    //Stay embed on the slope.
    while collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0)
        y--;
}

//Check for floor objects
if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_semisolid,0,0))
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_semisolid,0,0)))
|| (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)) {

    //No gravity
    gravity = 0
    
    //Stop vertical movement if moving down.
    if (vspeed &gt; 0) {
    
        vspeed = 0;
    }
        
    //Set the horizontal speed if not moving horizontally.
    if (hspeed == 0) {
    
        if (!instance_exists(obj_mario))
        || (obj_mario.x &lt; x)
            hspeed = -1;
        else
            hspeed = 1;
    }
}
else {

    //Apply gravity
    if (!swimming)
        gravity = 0.2;
    else
        gravity = 0.05;
}

//Ceiling check
if ((vspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left+1,bbox_top-1,bbox_right-1,bbox_top-1,obj_solid,1,0))) {

    //Prevent getting embed on a ceiling.
    while (collision_rectangle(bbox_left+1,bbox_top,bbox_right-1,bbox_top,obj_solid,1,0))
        y++;
        
    //Stop vertical movement.
    vspeed = 0;
    
    //Create a bumper if this object is a holdable item.
    if (object_get_parent(object_index) == obj_holdparent) {
    
        with (instance_create(x+8,y,obj_blockbumper))
            sprite_index = spr_mask_10;
    }
}

//Destroy when it falls out of the level
if (bbox_top &gt; room_height)
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
