<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_throwblock_th</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_holdparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A held blue brick

//Slowdown animation.
alarm[0] = 540;
alarm[1] = 1;

//Has the block been thrown?
ready = 0;

//Is the block about to disappear?
s_ready = 0;

//Combo
combo = 0;

//Is the block capable of hurting mario
harmmario = 0;

//Handle Mario's palettes
pal_sprite = spr_palette_throwblock;
pal = 0;

//Call the inherited event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Protect Mario from the horror of holding anything.

//Bump nearby blocks.
instance_create(x+8,y,obj_blockbumper);

//Call inherited event.
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Replace the palette

//Wrap around the palette to change up Mario's colours.
pal++;
if (pal &gt; 5) {

    //Reset the palette.
    pal = 0;
}

//Repeat the process.
if ((!s_ready) || (ready))
    alarm[1] = 2;
else
    alarm[1] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slow down / Destroy event.

if (!ready) {

    //Prepare to disappear.
    if (!s_ready) {
    
        //If Mario is warping and Mario is holding.
        if ((instance_exists(obj_mario_warp)) &amp;&amp; (obj_mario.holding == 1)) {
        
            alarm[0] = 1;
            exit;
        }
        else {
        
            //Set a slower animation speed before disappearing.
            s_ready = 1;
            
            //Repeat this process.
            alarm[0] = 60;
        }
    }
    else {
    
        //Create a smoke effect and destroy it.
        instance_create(x-8,y,obj_smoke);
        
        //Destroy
        instance_destroy();
    }
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Holdable Item logic

if (!held) {
    
    //Slowdown in contact with the ground.
    if (!ready) {
    
        //If the block is in contact with the ground.
        if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+4,obj_semisolid,0,0))
        || (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+4,obj_slopeparent,1,0))
        &amp;&amp; (vspeed &gt;= 0) {
        
            if (!swimming) {
            
                hspeed = max(0,abs(hspeed)-0.075)*sign(hspeed);
                if ((hspeed &lt; 0.075) &amp;&amp; (hspeed &gt; -0.075))       
                    hspeed = 0;
            }
            else {
            
                hspeed = max(0,abs(hspeed)-0.0375)*sign(hspeed);
                if ((hspeed &lt; 0.0375) &amp;&amp; (hspeed &gt; -0.0375))       
                    hspeed = 0;        
            }
        }
    }
    
    //Inherit the default event
    if (!inwall) {
    
        //Default wall collision
        event_user(3);
        
        //Default floor / ceiling collision
        event_user(4);
        
        //Default underwater script.
        var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0); //Check for the nearest water object and make the object swim.
        if (!swimming) &amp;&amp; (water) {
            
            //Make the object swim.
            swimming = true;
            
            //Stop vertical movement.
            gravity = 0;
            if (vspeed &gt; 0)
                vspeed = 0;
        }
        
        //Otherwise, if the object is swimming and there's no water above.
        else if (swimming) &amp;&amp; (!water) {
        
            //Stop swimming.
            swimming = false;
        }
    }
    
    //Move up if in contact with a slope
    while (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,0))
    &amp;&amp; (vspeed == 0)
        y--;
    
    //If the item gets stuck on a wall.
    if (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,1,1)) {

        //If the item is NOT stuck on a wall.
        if (!inwall) &amp;&amp; (vspeed &lt;&gt; 0) {
        
            //Stop movement.
            speed = 0
            gravity = 0;
            
            //Make the spring move.
            inwall = true;
        }
        
        //Otherwise, if the item is stuck on a wall, move it.
        else if (inwall)                   
            x -= 2.5*sign(dir);
    }
    else if (!collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,1,1)) 
        inwall = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario hold or interact with the item.

//If the item was not kicked yet.
if (!ready) {

    //If the item is not being held.
    if (!held) { 
        
        //If Mario can hold the item.
        if (can_hold() &amp;&amp; (!inwall) &amp;&amp; (other.bbox_bottom &gt; bbox_top+2)) {
            
            //Make Mario hold it.
            other.holding = 1;
            
            //Get held
            held = 1;
            
            //Change the depth
            depth = -4;
            
            //Disable speed / gravity
            speed = 0;
            gravity = 0;
        }
        
        //Otherwise, perform kick event
        else if (vspeed &gt;= 0) {
        
            //Play 'Kick' sound.
            audio_play_sound(snd_kick, 0, false);
            
            //Set the horizontal speed.
            if (obj_mario.x &lt; x+8)
                hspeed = 2.7;
            else
                hspeed = -2.7;
            
            //Get thrown
            ready = 1;
            
            //Create hit
            with (instance_create(x+8,y,obj_smoke)) {
            
                sprite_index = spr_spinthump;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collision

if (ready) {

    //If the object has been kicked and there's a wall on the way.
    if ((hspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left-hspeed,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)))
    || ((hspeed &gt; 0) &amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+hspeed,bbox_bottom-1,obj_solid,1,0)))
        event_user(0);
}
else
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default throw / kick event.

//If 'Up' is pressed, throw it upwards.
if (keyboard_check(vk_up)) {

    //Play 'Kick' sound.
    audio_play_sound(snd_kick, 0, false);
    
    //Move a few pixels upward.
    y -= 8;
    
    //Create hit
    with (instance_create(x+8,y,obj_smoke)) sprite_index = spr_spinthump;
    
    //If the item is not overlapping a solid.
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
    
        //Set the motion when swimming.
        if (collision_rectangle(bbox_left,y+8,bbox_right,y+8,obj_swim,0,0)) {
        
            hspeed = obj_mario.hspeed;
            vspeed = -1.75;
        }
        
        //Otherwise, set the motion when NOT swimming.
        else {
        
            hspeed = obj_mario.hspeed/2;
            vspeed = -7;
        }
    }
    else {
    
        //Destroy
        event_user(0);
        
        //Get 800 points
        with (instance_create(x+8,y,obj_score)) 
            event_user(4);
    }
}

//Otherwise, if 'Down' is pressed.
else if (keyboard_check(vk_down)) {

    //Set the horizontal speed
    hspeed = 0.5*obj_mario.xscale;
}

//Otherwise, throw it to the side.
else {
        
    //Play 'Kick' sound.
    audio_play_sound(snd_kick, 0, false);
    
    //Set the horizontal speed.
    hspeed = 2.7*obj_mario.xscale;
    
    //Set the animation speed
    image_speed = 1;
    
    //Get thrown
    ready = 1;
    
    //Create hit
    with (instance_create(x+8,y,obj_smoke)) sprite_index = spr_spinthump;
    
    //If the object is in contact with a solid.
    if (place_meeting(x,y,obj_solid))
        event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

//Play 'Brick' sound
audio_play_sound(snd_brick, 0, false);

//Create shards
shard(x+8,y+8,spr_shard_th,45);
shard(x+8,y+8,spr_shard_th,60);
shard(x+8,y+8,spr_shard_th,120);
shard(x+8,y+8,spr_shard_th,135);

//Destroy
instance_destroy();  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the block

//Set up palette shader
pal_swap_set(pal_sprite,pal);

//Draw Mario
if ((held) &amp;&amp; (obj_mario.xscale == -1))
    draw_sprite_ext(sprite_index,-1,round(x)+16,y+1,-1,1,0,c_white,1);
else     
    draw_sprite(sprite_index,-1,round(x),y+1);

//Reset the shader
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
