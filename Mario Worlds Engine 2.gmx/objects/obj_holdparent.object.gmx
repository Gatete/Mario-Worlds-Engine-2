<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_trampoline</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The parent object for all holdable items.

//Direction
dir = 1;

//Whether the object is being held.
held = 0;

//Delay the release of the item
delay = 8;

//Whether the object is stuck on a wall.
inwall = 0;

//Call the inherited event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Protect Mario from the horrors of holding anything

if (held) {

    //If Mario is warping through a pipe.
    if (instance_exists(obj_mario_warp)) {
    
        obj_mario_warp.holding = 0;
        obj_mario_warp.myitem = -1;
        obj_mario_warp.myframe = 1;
    }
    
    //Otherwise, if Mario is warping through a door.
    else if (instance_exists(obj_mario_door)) {
    
        obj_mario_door.holding = 0;
        obj_mario_door.myitem = -1;
        obj_mario_door.myframe = 1;
    }
    else
        obj_mario.holding = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If the item is being held.

if (held) {

    if (instance_exists(obj_mario)) {
    
        //If Mario's controls are NOT disabled.
        if (!obj_mario.disablecontrol) {
        
            //Snap into Mario's x position.
            if (obj_mario.turning) { //If Mario is turning.
            
                //Set the depth
                depth = -6;
                
                //Snap into Mario's x position.
                x = obj_mario.x-8;
            }
            
            //Otherwise, if Mario is not turning.
            else {
            
                //Set the depth
                depth = -4;
                
                //Snap into Mario's x position.
                x = obj_mario.x-8+10*obj_mario.xscale;
            }
            
            //Make Mario hold the item
            if (keyboard_check(vk_control))
                obj_mario.holding = 1;
                
            //Otherwise, if the control key is not longer held.
            else if (delay == 0) {
                
                //Make Mario kick and release the item.
                with (obj_mario) {
                
                    event_user(2);
                    holding = 0;
                }
                
                //Stop being held
                held = 0;
                
                //Reset depth
                depth = -2;
                
                //Default throw event
                event_user(2);           
            }
            
            //Decrement delay
            if (delay &gt; 0)
                delay--;
                
            //Disable swimming
            swimming = false;
                
            //Set item direction
            dir = obj_mario.xscale;
            
            //Snap into Mario's 'y' position.
            if (obj_mario.duck)              
                y = obj_mario.y;
            else
                y = obj_mario.y-6;
        }
        else {
        
            //Stop being held.
            held = false;
            
            //Reset delay
            delay = 8;
            
            //Reset depth
            depth = -2;
        }
        
        //Make it visible
        visible = 1;
    }
    
    //Otherwise, if Mario is warping through a pipe.
    else if (instance_exists(obj_mario_warp)) {
    
        //Set the position of the item.
        x = obj_mario_warp.x;
        y = obj_mario_warp.y;
        
        //Make it invisible.
        visible = 0;
        
        //Make Mario hold the item
        obj_mario_warp.holding = 1;
        
        //Set up the item's sprite
        obj_mario_warp.myitem = sprite_index;
        
        //Set up the item's frame.
        obj_mario_warp.myframe = image_index;
    }
    
    //Otherwise, if Mario is warping through a door.
    else if (instance_exists(obj_mario_door)) {
    
        //Set the position of the item.
        x = obj_mario_door.x;
        y = obj_mario_door.y;
        
        //Make it invisible.
        visible = 0;
        
        //Make Mario hold the item
        obj_mario_door.holding = 1;
        
        //Set up the item's sprite
        obj_mario_door.myitem = sprite_index;
        
        //Set up the item's frame.
        obj_mario_door.myframe = image_index;
    }
    
    //Otherwise, stop being held.
    else {
    
        //Stop being held.
        held = false;
        
        //Reset delay
        delay = 8;
        
        //Reset depth
        depth = -2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Holdable Item logic

if (!held) {
    
    //Slowdown in contact with the ground.
    if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+4,obj_semisolid,0,0))
    || (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+4,obj_slopeparent,1,0))
    &amp;&amp; (vspeed &gt;= 0) {
    
        if (!swimming) {
        
            hspeed = max(0,abs(hspeed)-0.075)*sign(hspeed);
            if ((hspeed &lt; 0.075) &amp;&amp; (hspeed &gt; -0.075))       
                hspeed = 0;
        }
        else {
        
            hspeed = max(0,abs(hspeed)-0.0375)*sign(hspeed);
            if ((hspeed &lt; 0.0375) &amp;&amp; (hspeed &gt; -0.0375))       
                hspeed = 0;        
        }
    }
    
    //Inherit the default event
    if (!inwall) {
    
        //Default wall collision
        event_user(3);
        
        //Default floor / ceiling collision
        event_user(4);
        
        //Default underwater script.
        var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0); //Check for the nearest water object and make the object swim.
        if (!swimming) &amp;&amp; (water) {
            
            //Make the object swim.
            swimming = true;
            
            //Stop vertical movement.
            gravity = 0;
            if (vspeed &gt; 0)
                vspeed = 0;
        }
        
        //Otherwise, if the object is swimming and there's no water above.
        else if (swimming) &amp;&amp; (!water) {
        
            //Stop swimming.
            swimming = false;
        }
    }
    
    //Move up if in contact with a slope
    if (vspeed &gt; 0) {
    
        while (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,0))    
            y--;
    }
    
    //If the item gets stuck on a wall.
    if (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,1,1)) {

        //If the item is NOT stuck on a wall.
        if (!inwall) &amp;&amp; (vspeed &lt;&gt; 0) {
        
            //Stop movement.
            speed = 0
            gravity = 0;
            
            //Make the spring move.
            inwall = true;
        }
        
        //Otherwise, if the item is stuck on a wall, move it.
        else if (inwall)                   
            x -= 2.5*sign(dir);
    }
    else if (!collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,1,1)) 
        inwall = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blockparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bumped by a block

if ((!held) &amp;&amp; (other.vspeed &lt; 0))
    vspeed = -2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario hold or interact with the item.

//If the item is not being held.
if (!held) { 

    //If Mario is above and moving down, use the stomp event.
    if ((other.bbox_bottom &lt; bbox_top-vspeed+5) &amp;&amp; (other.vspeed &gt; 0))
        event_user(1);
    
    //Otherwise, if Mario can hold the item.
    else if (can_hold() &amp;&amp; (!inwall) &amp;&amp; (other.bbox_bottom &gt; bbox_top+2)) {
        
        //Make Mario hold it.
        other.holding = 1;
        
        //Get held
        held = 1;
        
        //Change the depth
        depth = -4;
        
        //Disable speed / gravity
        speed = 0;
        gravity = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default throw / kick event.

//If 'Up' is pressed, throw it upwards.
if (keyboard_check(vk_up)) {

    //Play 'Kick' sound.
    audio_play_sound(snd_kick, 0, false);
    
    //Move a few pixels upward.
    y -= 8;
    
    //Create hit
    with (instance_create(x+8,y,obj_smoke)) sprite_index = spr_spinthump;
    
    //If the item is not overlapping a solid.
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
    
        //Set the motion when swimming.
        if (collision_rectangle(bbox_left,y+8,bbox_right,y+8,obj_swim,0,0)) {
        
            hspeed = obj_mario.hspeed;
            vspeed = -1.75;
        }
        
        //Otherwise, set the motion when NOT swimming.
        else {
        
            hspeed = obj_mario.hspeed/2;
            vspeed = -7;
        }
    }
    else
        inwall = true;
}

//Otherwise, if 'Down' is pressed.
else if (keyboard_check(vk_down)) {

    //Set the horizontal speed
    hspeed = 0.5*obj_mario.xscale;
}

//Otherwise, throw it to the side.
else {
        
    //Play 'Kick' sound.
    audio_play_sound(snd_kick, 0, false);
    
    //Move up
    y -= 8;
    
    //Create hit
    with (instance_create(x+8,y,obj_smoke)) sprite_index = spr_spinthump;

    //If the item is not overlapping a solid.
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
    
        //Set the motion when swimming.
        if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0)) {
        
            vspeed = -1;
            if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,0))
                hspeed = obj_mario.hspeed+0.325*obj_mario.xscale;
            else
                hspeed = 0.5*obj_mario.xscale;                
        }
        
        //Otherwise, set the motion when NOT swimming.
        else {
        
            vspeed = -2;
            if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,0))
                hspeed = obj_mario.hspeed+0.75*obj_mario.xscale;
            else
                hspeed = 1*obj_mario.xscale;                
        }
    }
    else
        inwall = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default stomp event

//Do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember the item held for the next room.

if (held) {

    //Remember the object.
    global.carrieditem = object_index;
    
    //Remember the sprite of the object.
    global.carriedsprite = sprite_index;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
