<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_eventmarker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manages the level, and required for all levels

/*
**  This item uses creation code!
**
**  levelmusic = The level music. (Any sound resource you load in, check up obj_persistent Game Start event for a list of songs that you can use.)
**  leveltime = The time limit in seconds. (Optional)
*/

//Default values
levelmusic = 0;
leveltime = 0;

//Play music
if (global.pswitch == 0)
&amp;&amp; (global.gswitch == 0)
&amp;&amp; (global.starman == 0)
    alarm[0] = 3;

//Screen shake
shake = 0;

//Barrier.
barrier = 1;

//PSwitch is on?
pswitchon = 0;
gswitchon = 0;

//Enforce barriers.
alarm[6] = 3;

//Enable / Disable music
musicdisable = false;

//Create HUD
instance_create(0,0,obj_hud);

//Camera variables
dest_x = view_xview - view_wview/2;
dest_y = view_yview - view_hview/2;
pan_speed = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake the screen

//If view 0 is enabled.
if (view_enabled[0]) {

    //If the 'Thwomp' sound is playing.
    if (audio_is_playing(snd_thwomp)) {
    
        //Shake
        shake = !shake;
        
        //Repeat
        alarm[10] = 1;
        
        //Update view
        if (shake)
            view_yport[0] += 4;
        else
            view_yport[0] -= 4;
    }
    else {
    
        shake = 0;
        view_yport[0] = 0;
    }
}
else {
    
    shake = 0;
    view_yport[0] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warn the player that the pswitch effect is running out.

audio_play_sound(snd_warning, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Gray P-Switch sequence.

//If the switch is on already.
if (gswitchon) {

    //Turn off the P-Switch.
    gswitchon = false;
    
    //Change items.
    with (obj_muncher) event_user(1);
    
    //Stop the switch song
    if (pswitchon == 0) {
    
        FMODInstanceStop(global.stream_pswitch);
        global.stream_pswitch = -1;
    }
    
    //Restart the invincibility music if it was stopped due to overlap.
    if (instance_exists(obj_invincibility)) {
    
        if (obj_invincibility.alarm[0] &gt; -1)    
            obj_invincibility.alarm[2] = 2;
        else
            alarm[0] = 2;
    }
    
    //Otherwise, restart
    else
        alarm[0] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End P-Switch sequence.

//If the switch is on already.
if (pswitchon) {

    //Turn off the P-Switch.
    pswitchon = false;
    
    //Change items.
    pswitch_deactivate();
    
    //Stop the switch song
    if (gswitchon == 0) {
    
        FMODInstanceStop(global.stream_pswitch);
        global.stream_pswitch = -1;
    }
    
    //Restart the invincibility music if it was stopped due to overlap.
    if (instance_exists(obj_invincibility)) {
    
        if (obj_invincibility.alarm[0] &gt; -1)    
            obj_invincibility.alarm[2] = 2;
        else
            alarm[0] = 2;
    }
    
    //Otherwise, restart
    else
        alarm[0] = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enforce barriers

barrier = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill Mario

if (instance_exists(obj_mario)) {

    //Set the timer to 0
    global.time = 0;
    
    //Kill Mario
    instance_create(obj_mario.x,obj_mario.y,obj_mario_dead);
    with (obj_mario) instance_destroy()
    exit;
}
else
    alarm[4] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warn the player that the time is running out.

//Play 'Hurry' sound.
audio_play_sound(snd_hurry, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement the time variable.

if (instance_exists(obj_mario)) {

    if (global.time &gt; 0) {
    
        //Decrement
        global.time--;
        
        //Decrement again after 4/6 a second.
        alarm[2] = 40;
        
        //Play the hurry up sound at 100 seconds left.
        if (global.time == 101)        
            alarm[3] = 40;
        
        //Kill Mario when time hits 0.
        else if (global.time == 1)       
            alarm[4] = 40;
    }
}
else {

    alarm[2] = 40;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the music.

//Stop stream
FMODInstanceStop(global.stream);
global.stream = -1;

//Do not remember music
global.music = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loop the music.

//If no Starman or P-Switch music is playing.
if (!FMODInstanceIsPlaying(global.stream_pswitch))
&amp;&amp; (!FMODInstanceIsPlaying(global.stream_starman)) {

    //Deny if music has been disabled.
    if (musicdisable)
    exit;
    
    //If the music is not the same as the music from the previous area.
    if (levelmusic != global.music) {
    
        //Stop old stream
        if (FMODInstanceIsPlaying(global.stream)) {
        
            FMODInstanceStop(global.stream);
            global.stream = -1;
        }
        
        //Play new stream
        global.stream = FMODSoundLoop(levelmusic, 0);
    }
    else
        global.stream = FMODSoundLoop(levelmusic, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with music

//If the level does have time left.
if (global.time &gt; 0) {

    //Set all music at a higher speed if time is running out.
    if (global.time &lt; 101) {
    
        //Set the pitch for the pswitch theme if it's playing.
        if (FMODInstanceIsPlaying(global.stream_pswitch))     
            FMODGroupSetPitch(3,1);    
        else
            FMODGroupSetPitch(3,1.25);            
    }
    
    //Otherwise, set all music speed to default.
    else    
        FMODGroupSetPitch(3,1);      
}

//Otherwise, if the level does NOT have time left.
else
    FMODGroupSetPitch(3,1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with various game logic stuff.

//Follow Mario if he does exist
if (instance_exists(obj_mario)) {

    x = round(obj_mario.x);
    y = round(obj_mario.y);
     
    //Prevent Mario from going outside the room boundary
    if (obj_mario.x &lt; 5) {
    
        //Snap Mario 5 pixels at the right of the left boundary.
        obj_mario.x = 5;
        
        //Stop Mario's horizontal movement
        if (obj_mario.hspeed &lt; 0)
            obj_mario.hspeed = 0;
    }
    else if (obj_mario.x &gt; room_width-5) {
    
        //Snap Mario 5 pixels at the right of the left boundary.
        obj_mario.x = room_width-5;
        
        //Stop Mario's horizontal movement
        if (obj_mario.hspeed &gt; 0)
            obj_mario.hspeed = 0;
    }
}

//Follow Mario when it's warping through a pipe.
else if (instance_exists(obj_mario_warp)) {

    x = round(obj_mario_warp.x);
    y = round(obj_mario_warp.y);
}

//Drop the reserve item
if (instance_exists(obj_mario))
&amp;&amp; (barrier == 0)
&amp;&amp; (obj_mario.disablecontrol = false)
&amp;&amp; (keyboard_check_pressed(vk_space))
    event_user(0);

//Deactivate instances outside the view.
event_user(3);

//Get a extra life when 100 coins are collected.
if (global.coins &gt;= 100) {

    //Subtract 100 coins
    global.coins -= 100;
    
    //Get a life
    lives++;
    
    //Play '1-UP' sound
    audio_play_sound(snd_1up,0,false);
}

//Make the screen shake
if (!audio_is_playing(snd_thwomp)) {

    alarm[10] = 2;
    if (view_yport[0] != 0)
        view_yport[0] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy all player objects

with (obj_mario) instance_destroy();
with (obj_mario_warp) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deactivate instances outside the view.

//Deactivate instances with 'obj_deactenemyparent' set as parent object.
//instance_deactivate_object(obj_deactenemyparent);

//Deactivate instances with 'obj_deactivateparent' set as parent object.
instance_deactivate_object(obj_deactivateparent);

//Activate the previous deactivated instances when inside the window.
instance_activate_region(view_xview[0]-32,view_yview[0]-80,view_wview[0]+32,view_hview[0]+80,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin Gray P-Switch sequence.

//If the Gray P-Switch sequence is not active.
if (!gswitchon) {

    //Begin sequence
    gswitchon = true;
    
    //Change items
    with (obj_muncher) event_user(0);
}

//Stop music
alarm[1] = 1;

//Do not overlap starman
FMODInstanceStop(global.stream_starman);
global.stream_starman = -1;

//Start the switch song or restart it if a new switch has been hit.
if (!FMODInstanceIsPlaying(global.stream_pswitch))
    global.stream_pswitch = FMODSoundLoop(global._track_switch, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin P-Switch sequence

//If the P-Switch sequence is not active.
if (!pswitchon) {

    //Begin sequence
    pswitchon = true;
    
    //Change items
    pswitch_activate();
}

//Stop music
alarm[1] = 1;

//Do not overlap starman
FMODInstanceStop(global.stream_starman);
global.stream_starman = -1;

//Start the switch song or restart it if a new switch has been hit.
if (!FMODInstanceIsPlaying(global.stream_pswitch))
    global.stream_pswitch = FMODSoundLoop(global._track_switch, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drop the reserve item

//If a reserve item exists
if (global.reserveitem &gt; cs_small) {

    //Create the reserve item
    with (instance_create(view_xview[0]+184,view_yview[0]+13,obj_reserveitem)) {
    
        //Check up the reserved item.
        switch (global.reserveitem) {
        
            //Mushroom
            case (cs_big): 
                sprite_index = spr_mushroom; break;
            
            //Fire Flower
            case (cs_fire):
                sprite_index = spr_fireflower; break;
                
            //Leaf
            case (cs_leaf):
                sprite_index = spr_leaf; break;
        }
    }

    //Remove the reserve item
    global.reserveitem = cs_small;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember P-Switch if active and disable horizontal wrap.

//Remember previous music
global.music = levelmusic;

//Remember pswitch time limit
if (pswitchon) {

    global.pswitch = alarm[7];
    alarm[7] = -1;
}
else if (gswitchon) {

    global.gswitch = alarm[8];
    alarm[8] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Mario Start, room warping, music and timer.

//Set up the time for the level.
if (leveltime &gt; 0) { //If the timer has been set.

    //If the global time for the level is equal to 0.
    if (global.time = 0) {
    
        global.time = leveltime;
        alarm[2] = 50;
    }
    
    //Otherwise, if the time has been set before.
    else if (global.time &gt; 0)
        alarm[2] = 50;
}

//If Mario just started the level
if (global.mariostart = 0) {

    //The level has started
    global.mariostart = 1;

    //Handles checkpoints
    if (instance_exists(global.checkpoint)) {

        //Destroy all player objects
        event_user(0);

        //Create a new Mario at the desired location
        instance_create(global.checkpoint.x+8,global.checkpoint.y+16,obj_mario);
    }

    //Create the Mario Start! effect
    instance_create(0,0,obj_mariostart);
}

//If Mario came from another room.
if (global.postchange != -1) {

    //Destroy all player objects
    event_user(4);
    
    //Create the appropiate Mario object at the desired location.
    switch (global.postchange) {
    
        //Mario
        case (0): {
        
            instance_create(global.postx,global.posty,obj_mario);
        } break;
        
        //Warp Mario
        case (1): {
        
            instance_create(global.postx,global.posty,obj_mario_warp);
        } break;
    }
    
    //Make Mario able to warp between rooms.
    global.postchange = -1;
}

//If Mario was riding a yoshi on the previous room.
if (global.yoshi == 1) {

    instance_create(x,y,obj_yoshi);
}

//If Mario carried an item through a pipe in the last room.
else if (global.carrieditem != noone) {

    //If the item is a SMW carryable item.
    if (object_get_parent(global.carrieditem) == obj_holdparent) {
    
        //Create it.
        with (instance_create(x,y,global.carrieditem)) {
        
            //Hold the item.
            held = 1;
            
            //Set up the sprite
            if (global.carriedsprite != noone) {
            
                //Change the sprite
                sprite_index = global.carriedsprite;
                
                //Reset sprite
                global.carriedsprite = noone;    
            }
        }
        
        //If Mario does exist on the room.
        if (instance_exists(obj_mario))
            obj_mario.holding = 1;
    }
    
    //Otherwise, if the item is a SMB2 carryable item.
    else if (object_get_parent(global.carrieditem) == obj_carryparent) {
    
        //Create it.
        with (instance_create(x,y,global.carrieditem)) {
        
            //Hold the item.
            held = 1;
            
            //Set up the sprite
            if (global.carriedsprite != noone) {
            
                //Change the sprite
                sprite_index = global.carriedsprite;
                
                //Reset sprite
                global.carriedsprite = noone;    
            }
        }
        
        //If Mario does exist on the room.
        if (instance_exists(obj_mario))
            obj_mario.holding = 2;
    }

    //Reset the variable
    global.carrieditem = noone;
}

//Turn on P-Switch if it was activated on the previous room.
if (global.pswitch &gt; 0) {

    //Turn on the P-Switch
    event_user(1);
    
    //Set the timer
    alarm[7] = max(global.pswitch,30);
    
    //Reset the variable
    global.pswitch = 0;
}

//Turn on gray P-Switch if it was activated on the previous room.
if (global.gswitch &gt; 0) {

    //Turn on the gray P-Switch
    event_user(2);
    
    //Set the timer
    alarm[8] = max(global.gswitch,30);
    
    //Reset the variable
    global.gswitch = 0;
}

//If a star was active on the previous room.
if (global.starman &gt; 0) {

    //Create a new starman object.
    with (instance_create(0,0,obj_invincibility)) {
    
        alarm[0] = max(global.starman,30);
    }
    
    //Reset the variable
    global.starman = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deals with parallax backgrounds.

draw_background_tiled_horizontal_ext(background_index[0],view_xview[0]/2+(background_x[0]+background_hspeed[0]),background_y[0]+(view_yview[0]*(room_height-background_height[0])/(room_height-view_hview[0])),1,1,0,background_blend[0],background_alpha[0]);
draw_background_tiled_horizontal_ext(background_index[1],view_xview[0]/2+(background_x[1]+background_hspeed[1]),background_y[1]+(view_yview[0]*(room_height-background_height[1])/(room_height-view_hview[0])),1,1,0,background_blend[0],background_alpha[1]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause the game.

//Do not pause if ALT key is pressed.
if (keyboard_check(vk_alt))
exit;

instance_create(0,0,obj_pause);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
