<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_vegetable</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The parent object of all SMB2 carryable items.

//Do not animate
image_speed = 0;
image_index = 0;

//How many hits did the object?
combo = 0;

//Whether the object is held.
held = 1;

//Whether the object is thrown.
ready = 0;

//Whether the object is swimming
swimming = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Protect Mario from the horrors of holding anything

if (held) {

    //If Mario is warping through a pipe.
    if (instance_exists(obj_mario_warp)) {
    
        obj_mario_warp.holding = 0;
        obj_mario_warp.myitem = -1;
        obj_mario_warp.myframe = 1;
    }
    
    //Otherwise, if Mario is warping through a door.
    else if (instance_exists(obj_mario_door)) {
    
        obj_mario_door.holding = 0;
        obj_mario_door.myitem = -1;
        obj_mario_door.myframe = 1;
    }
    else
        obj_mario.holding = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vegetable logic (Player)

//If this object is being held.
if (held) {

    //If Mario does exist.
    if (instance_exists(obj_mario)) {
    
        //Set the x position.
        x = obj_mario.x-8;
        
        //Set the y position.
        if (ready == 0) {
        
            if (instance_exists(obj_puller)) {
            
                y -= 2;
                if ((global.powerup == cs_small) &amp;&amp; (y &lt; obj_mario.y-11)) {
                    
                    ready = 1;
                    with (obj_puller)
                        instance_destroy();                  
                }
                else if (y &lt; obj_mario.y-14) {
                    
                    ready = 1;
                    with (obj_puller)
                        instance_destroy();
                }
            }
            
            //Set depth
            depth = -6;
            
            //Disable Mario's controls
            with (obj_mario) disablecontrol = true;
        }
        else {
        
            //If Mario is crouched down.
            if (obj_mario.duck) {
            
                //If Mario is small.
                if (global.powerup == cs_small)
                    y = obj_mario.y-12;
                else
                    y = obj_mario.y-15;
            }
            
            //Otherwise, if it's not.
            else {
            
                //If Mario is small.
                if (global.powerup == cs_small)
                    y = obj_mario.y-14;
                else
                    y = obj_mario.y-20;
            }
            
            //Set the depth
            depth = -6;
        }
                
        //Make it visible
        visible = 1;
        
        //Force Mario to hold it
        obj_mario.holding = 2;
        
        //Enable Mario's controls
        with (obj_mario) disablecontrol = false;
    }
    
    //Otherwise, if Mario is warping through a pipe.
    else if (instance_exists(obj_mario_warp)) {
    
        //Set the position of the item.
        x = obj_mario_warp.x;
        y = obj_mario_warp.y;
        
        //Make it invisible.
        visible = 0;
        
        //Make Mario hold the item
        obj_mario_warp.holding = 1;
        
        //Set up the item's sprite
        obj_mario_warp.myitem = sprite_index;
        
        //Set up the item's frame.
        obj_mario_warp.myframe = image_index;
    }
    
    //Otherwise, if Mario is warping through a door.
    else if (instance_exists(obj_mario_door)) {
    
        //Set the position of the item.
        x = obj_mario_door.x;
        y = obj_mario_door.y;
        
        //Make it invisible.
        visible = 0;
        
        //Make Mario hold the item
        obj_mario_door.holding = 1;
        
        //Set up the item's sprite
        obj_mario_door.myitem = sprite_index;
        
        //Set up the item's frame.
        obj_mario_door.myframe = image_index;
    }
    
    //Otherwise, stop being held.
    else {
    
        instance_create(x,y,obj_smoke);
        instance_destroy();
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vegetable logic

//If the object is being held.
if (held) {

    //If the control key is being pressed and the vegetable can be thrown.
    if (keyboard_check_pressed(vk_control))
    &amp;&amp; (ready == 1) {
    
        //If Mario does exist.
        if (instance_exists(obj_mario)) {
        
            //Play 'Throw' sound
            audio_play_sound(snd_throw, 0, false);
            
            //With Mario
            with (obj_mario) {
            
                //Stop holding
                holding = 0;
                
                //Toss
                event_user(3);
            }
            
            //Check if 'Up' is pressed and throw the object upwards if so.
            if (keyboard_check(vk_up)) {

                //Set the vertical speed
                vspeed = -6;
                gravity = 0.2;
                
                //Set the horizontal speed
                hspeed = obj_mario.hspeed/2;
            }
            
            //Otherwise, if it's not.
            else {
            
                //Set the vertical speed
                vspeed = 1;
                gravity = 0.2;
                
                //Set the horizontal speed
                if (obj_mario.xscale == 1)
                    hspeed = obj_mario.hspeed+2;
                else
                    hspeed = obj_mario.hspeed-2;
            }
            
            //Stop holding.
            held = false;
        }
    }
}
else {

    //Gravity
    gravity = 0.2-(0.15*swimming);

    //When moving down
    if (vspeed &gt; 0) {
    
        //Cap fall speed
        if (!swimming) //If not swimming.
        &amp;&amp; (vspeed &gt; 4)
            vspeed = 4;
        
        //Otherwise, if swimming.
        else if (swimming)
        &amp;&amp; (vspeed &gt; 1)
            vspeed = 1;
    }

    //Default underwater script.
    var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0); //Check for the nearest water object and make the object swim.
    if (!swimming) &amp;&amp; (water) {
        
        //Make the object swim.
        swimming = true;
        
        //Halve current speed
        hspeed = hspeed/2;
        
        //Stop vertical movement
        gravity = 0;
        if (vspeed &gt; 0)
            vspeed = 0;
    }
    
    //Otherwise, if the object is swimming and there's no water above.
    else if (swimming) &amp;&amp; (!water) {
    
        //Stop swimming.
        swimming = false;
        
        //Double current speed.
        hspeed = hspeed*2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember the item held for the next room.

if (held) {

    //Remember the object.
    global.carrieditem = object_index;
    
    //Remember the sprite of the object.
    global.carriedsprite = sprite_index;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw vegetable

draw_sprite(sprite_index,-1,round(x),round(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
