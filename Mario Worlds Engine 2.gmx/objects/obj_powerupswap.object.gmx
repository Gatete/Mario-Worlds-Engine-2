<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mushroom</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9</depth>
  <persistent>0</persistent>
  <parentName>obj_powerupparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///An item that changes of shape.

//Animate the object.
image_speed = 0;
image_index = 0;

//Change
alarm[0] = 90;

//Sparkle trail
alarm[1] = 4;

//Whether this object is outside the block
ready = 0;

//Move up
vspeed = -2;

//Call inherited event.
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sparkle trail

alarm[1] = 4;
if (sprite_index = spr_starman) {
    
    with (instance_create(x+random(round(16)),y+random(round(16)),obj_smoke)) {
    
        sprite_index = spr_sparkle_trail;
        image_speed = 0.1;       
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change the sprite

switch (sprite_index) {

    //Mushroom -&gt; Fireflower
    case (spr_mushroom): { 
    
        sprite_index = spr_fireflower;
        image_speed = 0;
        image_index = 0;
        break;
    }
    
    //Fireflower -&gt; Leaf
    case (spr_fireflower): {
    
        sprite_index = spr_leaf;
        image_speed = 0;
        image_index = 0;
        break;
    }
    
    //Leaf -&gt; Starman
    case (spr_leaf): {
    
        sprite_index = spr_starman;
        image_speed = 0.5;
        break;
    } break;
    
    //Starman -&gt; Mushroom
    case (spr_starman): {
    
        sprite_index = spr_mushroom;
        image_speed = 0;
        break;
    } break;
}

//Repeat the process.
alarm[0] = 90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Roulette item logic

if (ready == 0) {

    gravity = 0;
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
        
        //Out of the block.
        ready = true;
        
        //Set depth
        depth = -2;
        
        //Set vertical speed
        vspeed = -4.5;
        
        //Set horizontal speed.
        if (hspeed == 0) {
        
            if (!instance_exists(obj_mario))
            || (obj_mario.x &lt; x)
                hspeed = -1;
            else
                hspeed = 1;
        }
    }
}

//Otherwise, if there's not a block in position.
else
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mario">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get the item shown

//If the item is not overlapping a solid.
if (ready == true) {

    //Check the sprite
    switch (sprite_index) {
    
        //Mushroom
        case (spr_mushroom): {
        
            event_perform_object(obj_mushroom,ev_collision,obj_mario);
            break;
        }
        
        //Mushroom
        case (spr_fireflower): {
        
            event_perform_object(obj_fireflower,ev_collision,obj_mario);
            break;
        }
        
        //Mushroom
        case (spr_leaf): {
        
            event_perform_object(obj_leaf,ev_collision,obj_mario);
            break;
        }
    
        //Starman
        case (spr_starman): {
        
            event_perform_object(obj_starman,ev_collision,obj_mario);
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor / ceiling collisions

//When moving down
if (vspeed &gt; 0) {

    //Check for a semisolid below
    var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_semisolid,0,0);

    //Handle semisolid collisions
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
        y = semisolid.bbox_top-16;

    //Cap fall speed
    if (!swimming) //If not swimming.
    &amp;&amp; (vspeed &gt; 4)
        vspeed = 4;
    
    //Otherwise, if swimming.
    else if (swimming)
    &amp;&amp; (vspeed &gt; 1)
        vspeed = 1;
}

//Embed into the slope to ensure correct slope mechanics
if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+4,obj_slopeparent,1,0))
and (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_slopeparent,1,0))
and (vspeed = 0)
    y += 4;

///Handle slope collisions
if (collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0))
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-8,bbox_right,bbox_bottom-8,obj_slopeparent,1,0)) {

    //Stay embed on the slope.
    while collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0)
        y--;
}

//Check for floor objects
if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_semisolid,0,0))
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_semisolid,0,0)))
|| (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)) {

    //No gravity
    gravity = 0
    
    //Stop vertical movement if moving down.
    if (vspeed &gt;= 0) {
        
        if (!swimming)
            vspeed = -4.5;
        else
            vspeed = -1.125;
    }
}
else {

    //Apply gravity
    if (!swimming)
        gravity = 0.2;
    else
        gravity = 0.05;
}
    
//Ceiling check
if ((vspeed &lt; 0) &amp;&amp; (collision_rectangle(bbox_left+1,bbox_top-1,bbox_right-1,bbox_top-1,obj_solid,1,0))) {

    //Prevent getting embed on a ceiling.
    while (collision_rectangle(bbox_left+1,bbox_top,bbox_right-1,bbox_top,obj_solid,1,0))
        y++;
        
    //Stop vertical movement.
    vspeed = 0;
    
    //Create a bumper if this object is a holdable item.
    if (object_index = obj_holdparent) {
    
        with (instance_create(x+8,y,obj_blockbumper))
            sprite_index = spr_mask_10;
    }
}

//Destroy when it falls out of the level
if (bbox_top &gt; room_height+32)
    instance_destroy()
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
