<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_water</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_square</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///A ocean, add it on your underwater stages.

/*
//  This item uses creation code.
//
//  push = Leave it to true to push Mario when it's swimming inside.
*/

//Whether this can push Mario.
push = false;

//Animate
image_speed = 0.15;

//Set depth
depth = -7;

//Make the tide rise/shrink
alarm[0] = 360;

//Create bubble effects
alarm[1] = 7;

//Create a water surface
water = instance_create(x,y,obj_swim);
with (water) {

    image_xscale = room_width/16;
    image_yscale = room_height/16;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create bubble effects

alarm[1] = 7;
if (push)
    instance_create(view_xview[0]+view_wview[0],random_range(y+16,room_height),obj_bubble_v);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move

if (vspeed == 0) {

    //Collision with a 'Up' arrow modifier.
    if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_up,0,1))   
        vspeed = -0.25;
    
    //Collision with a 'Down' arrow modifier.
    else if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_down,0,1))
        vspeed = 0.25;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Water logic

//If the water is changing it's position.
if (vspeed != 0) {

    //If the water collides with a 'End' modifier.
    if (collision_rectangle(bbox_left,y,bbox_right,y+15,obj_endmarker,0,1)) {
    
        //Stop moving
        vspeed = 0;
        
        //Snap in grid
        move_snap(16,16);
        
        //Repeat again
        alarm[0] = 360;
    }
}


//Update water position.
water.x = x;
water.y = y+4;

//Check for Mario
mario = collision_rectangle(water.bbox_left,water.bbox_top,water.bbox_right,water.bbox_bottom,obj_mario,0,1);

//If Mario is overlapping this object and it's swimming.
if (push) {

    if (!instance_exists(obj_puller))
    &amp;&amp; (mario) 
    &amp;&amp; (mario.swimming)
    &amp;&amp; (!collision_rectangle(mario.bbox_left-1,mario.bbox_top+4,mario.bbox_left,mario.bbox_bottom-1,obj_solid,1,1))
        mario.x -= 0.3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the water

//Set the blending mode.
draw_set_blend_mode(bm_add);

//Draw the ocean.
var i;
i = 0;
for (i=0; i&lt;room_width/16+1; i++;) {

    draw_sprite_ext(sprite_index,-1,i*16,y,1,1,0,c_white,0.7);
}

//Set the colour
draw_set_colour(make_color_rgb(7,48,122));

//Set the alpha
draw_set_alpha(0.7);

//Draw a rectangle.
draw_rectangle(x,y+16,room_width,room_height,false);

//Reset the alpha
draw_set_alpha(1);

//Set the blending mode.
draw_set_blend_mode(bm_inv_src_colour);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
