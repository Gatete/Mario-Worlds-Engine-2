<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_qblock_triple</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_blockparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Triple wide question mark block

/*
//  This item uses creation code.
//
//  sprout[0] = Pick from below. (Default is cs_coin)
//  sprout[1] = Pick from below. (Default is cs_coin)
//  sprout[2] = Pick from below. (Default is cs_coin)
//
//      cs_coin             =       1 coin
//      cs_coins            =       10 coins
//      cs_big              =       Mushroom
//      cs_fire             =       Mushroom / Fireflower
//      cs_leaf             =       Mushroom / Leaf
//      cs_1up              =       1-UP Mushroom
//      cs_poison           =       Poison Mushroom
//      cs_starman          =       Starman
//      cs_trampoline       =       Trampoline
//      cs_pswitch          =       P-Switch
//      cs_gswitch          =       Gray P-Switch
//      cs_pow              =       POW Block
//      cs_beanstalk        =       Beanstalk
//      cs_beanstalk_alt    =       Alt. Beanstalk
//      cs_key              =       Key
//      cs_yoshi            =       Yoshi
//      cs_yoshi_g          =       Green Yoshi
//      cs_yoshi_r          =       Red Yoshi
//      cs_yoshi_y          =       Yellow Yoshi
//      cs_yoshi_b          =       Blue Yoshi
*/

//Default item:
sprout[0] = cs_coin;
sprout[1] = cs_coin;
sprout[2] = cs_coin;

//Animate
image_speed = 0.25;

//Whether this block can be hit
ready = 0;

//Create a solid if not hidden.
mysolid = instance_create(x,y,obj_solid);
with (mysolid) {

    image_xscale = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish block bump

//Stop vertical movement
vspeed = 0;
y = ystart;

//Sprout out an item
event_user(1);

//Turn into a used block
instance_change(obj_qblock_triple_empty,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprout out an item

for (i=0; i&lt;3; i++;) {

    //Check what item does the block have.
    switch (other.sprout[i]) {
    
        //Mushroom
        case (cs_big): {
        
            with (instance_create(x+i*16,ystart,obj_powerupsprout))
                sprite_index = spr_mushroom;
        } break;
        
        //Fire Flower
        case (cs_fire): {
        
            //If Mario is small
            if (global.powerup == cs_small) {
            
                with (instance_create(x+i*16,ystart,obj_powerupsprout))
                    sprite_index = spr_mushroom;
            }
            else {
                        
                with (instance_create(x+i*16,ystart,obj_powerupsprout))
                    sprite_index = spr_fireflower;                
            }
        } break;
        
        //Raccoon Leaf
        case (cs_leaf): {
        
            //If Mario is small
            if (global.powerup == cs_small) {
            
                with (instance_create(x+i*16,ystart,obj_powerupsprout))
                    sprite_index = spr_mushroom;
            }
            else {
                        
                with (instance_create(x+i*16,ystart,obj_powerupsprout))
                    sprite_index = spr_leaf;                
            }        
        } break;
        
        //1up
        case (cs_1up): {
        
            with (instance_create(x+i*16,ystart,obj_powerupsprout))
                sprite_index = spr_1up;
        } break;
        
        //Poison
        case (cs_poison): {
        
            with (instance_create(x+i*16,ystart,obj_powerupsprout))
                sprite_index = spr_poison;
        } break;
        
        //Starman
        case (cs_starman): {
        
            with (instance_create(x+i*16,ystart,obj_powerupsprout))
                sprite_index = spr_starman;
        } break;        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a coin if selected.

for (i=0; i&lt;3; i++;) {

    //Coin
    if (sprout[i] == cs_coin)
        instance_create(x+i*16,ystart-16,obj_blockcoin);
        
    //10 Coins
    else if (sprout[i] == cs_coins) {
    
        //Play 'Dragon coin' sound
        audio_play_sound(snd_coin_dragon, 0, false);
    
        //Create 10 coins.
        repeat(10) {
        
            ID = instance_create(x+i*16,ystart-17,obj_blockcoin_b);
            with (ID) {
            
                //Set the horizontal speed
                hspeed = random_range(1.5,-1.5);
    
                //Set the vertical speed
                vspeed = random_range(-1,-6);
            }
        }
    }
    
    //Trampoline
    else if (sprout[i] == cs_trampoline) {
    
        //Play 'Sprout' sound.
        audio_play_sound(snd_sprout, 0, false);
        
        //Create smoke
        instance_create(x+i*16,ystart-8,obj_smoke);
        
        //Create a spring board.
        with (instance_create(x+i*16,ystart-17,obj_trampoline))
            vspeed = -2.5;
    }
    
    //P-Switch
    else if (sprout[i] == cs_pswitch) {
    
        //Play 'Sprout' sound.
        audio_play_sound(snd_sprout, 0, false);
        
        //Create smoke
        instance_create(x+i*16,ystart-8,obj_smoke);
        
        //Create a spring board.
        with (instance_create(x+i*16,ystart-17,obj_pswitch))
            vspeed = -2.5;
    }
    
    //Gray P-Switch
    else if (sprout[i] == cs_gswitch) {
    
        //Play 'Sprout' sound.
        audio_play_sound(snd_sprout, 0, false);
        
        //Create smoke
        instance_create(x+i*16,ystart-8,obj_smoke);
        
        //Create a spring board.
        with (instance_create(x+i*16,ystart-17,obj_gswitch))
            vspeed = -2.5;
    }
    
    //POW Block
    else if (sprout[i] == cs_pow) {
    
        //Play 'Sprout' sound.
        audio_play_sound(snd_sprout, 0, false);
        
        //Create smoke
        instance_create(x+i*16,ystart-8,obj_smoke);
        
        //Create a spring board.
        with (instance_create(x+i*16,ystart-17,obj_powblock))
            vspeed = -2.5;
    }
    
    //Key
    else if (sprout[i] == cs_key) {
    
        //Play 'Sprout' sound.
        audio_play_sound(snd_sprout, 0, false);
        
        //Create smoke
        instance_create(x+i*16,ystart-8,obj_smoke);
        
        //Create a spring board.
        with (instance_create(x+i*16,ystart-17,obj_key))
            vspeed = -2.5;
    }
    
    //Yoshi
    else if (sprout[i] &lt;= cs_yoshi) {
    
        //If a random Yoshi was chosen, set it now.
        if (sprout[i] == cs_yoshi) {
        
            sprout[i] = choose(cs_yoshi_g,cs_yoshi_r,cs_yoshi_y,cs_yoshi_b);
        }
    
        //Play 'Sprout' sound
        audio_play_sound(snd_sprout, 0, false);
        
        //Create a yoshi egg
        with (instance_create(x+i*16,ystart-17,obj_egg)) {
        
            //Check the constant and return the colour.
            switch (other.sprout[i]) {
            
                case (cs_yoshi_g): //Green Yoshi         
                    colour = 0; break;
                case (cs_yoshi_r): //Red Yoshi         
                    colour = 1; break;
                case (cs_yoshi_y): //Yellow Yoshi         
                    colour = 2; break;
                case (cs_yoshi_b): //Blue Yoshi         
                    colour = 3; break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
