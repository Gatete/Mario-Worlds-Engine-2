<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_yoshi_normal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yoshi is being ridden

//Default colour
if (global.ycolour &gt; 0) {

    colour = global.ycolour;
    global.ycolour = 0;
}
else
    colour = 0;

//On yoshi
global.yoshi = 1;

//Is yoshi licking?
licking = 0;

//Whether Yoshi's tounge is locked.
locked = false;

//What's in Yoshi's mouth?
mouthholder = noone;

//Sprite of the item in Yoshi's mouth
mouthsprite = noone;

//Whether Yoshi has ate a powerup
powerup = noone;

//Animation
anim = 0;

//Mario's previous state
stateprev = 0;

//Is Yoshi jumping?
jumping = 0;

//Is Yoshi flying
flying = 0;

//Flying animation
flyanim = 1;

//If an item was carried from the previous room.
if (global.carrieditem != noone) {

    //Remember the item and reset it.
    mouthholder = global.carrieditem;
    global.carrieditem = noone;
    
    //Remember the sprite and reset it.
    mouthsprite = global.carriedsprite;
    global.carritedsprite = noone;
}

//Update palette
pal_sprite = spr_palette_yoshi;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Yoshi

//Not on Yoshi
global.yoshi = 0;

//Reset Mario's holding variable
with (obj_mario) holding = 0;

//Destroy tongue
with (obj_tounge) instance_destroy();

//If something is in its mouth, spit it out
if ((instance_exists(obj_mario)) &amp;&amp; (mouthholder != noone))
    event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make flying noises for blue Yoshi

if (flying) {

    //Play 'Tounge' sound.
    audio_play_sound(snd_lick, 0, false)
    
    //Repeat the process.
    alarm[4] = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create eaten powerup

instance_create(x-8,y,powerup);
powerup = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish licking

licking = 0;

//If Yoshi ate a powerup, create it.
if (powerup != noone)
    alarm[3] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin finishing the licking process

anim = 0;
alarm[2] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start licking

anim = 1;
instance_create(x,y,obj_tounge);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yoshi logic

//If Mario does exist.
if (instance_exists(obj_mario)) {

    //Snap into Mario
    x = obj_mario.x;
    y = obj_mario.y;
    
    //Force Mario to be invisible
    obj_mario.visible = 0;
    
    //Force Mario to hold yoshi
    obj_mario.holding = 3;
        
    //If Yoshi is not licking and control is pressed.
    if (keyboard_check_pressed(vk_control))
    &amp;&amp; (!licking)
    &amp;&amp; (!obj_mario.disablecontrol) {
    
        //If the mouth is empty, start licking.
        if (mouthholder == noone) {
        
            //Play 'Lick' sound
            audio_play_sound(snd_lick, 0, false);
            
            //Start licking
            licking = 1;
            alarm[0] = 5;
            
            //Animation
            anim = 0;
            
            //Lock the tounge in position
            if ((keyboard_check(vk_up)) || (jumping &gt; 0)) {
            
                //If Mario is not crouched down
                if (!obj_mario.duck)
                    locked = 1;
                else
                    locked = 2;
            }
            else
                locked = 2;
        }
        
        //Otherwise, spit out the item.
        else
            event_user(0);
    }
    
    //Depth
    depth = -4;
    
    //Mask
    obj_mario.mask_index = spr_playermask_big;
    
    //Check if Mario is jumping and make yoshi set up his jump pose if so.
    if (obj_mario.state == cs_state_jump)
        jumping = 1;
    else
        jumping = 0;
}

//Otherwise, if Mario is warping through a pipe.
else if (instance_exists(obj_mario_warp)) {

    //Snap into Mario
    x = obj_mario_warp.x;
    y = obj_mario_warp.y;
    
    //Force Mario to be invisible
    obj_mario_warp.visible = 0;
    
    //Depth
    depth = 10;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Yoshi animation

//If Mario does exist.
if (instance_exists(obj_mario)) {

    //If yoshi is licking.
    if (licking) {
    
        //If the 'Up' key is being held or Yoshi is jumping.
        if (locked == 1) {
            
            //Set the sprite
            sprite_index = spr_yoshi_lick;
            
            //Do not animate
            image_speed = 0;
            
            //Set the frame
            if (obj_mario.vspeed != 0) {
            
                if (obj_mario.vspeed &lt; 0)
                    image_index = 1;
                else if (obj_mario.vspeed &gt; 0)
                    image_index = 2;
            }
            else
                image_index = 0;
        }
            
        //Otherwise, if Mario is not moving vertically
        else {
            
            //Set the sprite
            sprite_index = spr_yoshi_lick_alt;
            
            //Do not animate
            image_speed = 0;
            
            //Set the frame
            image_index = anim;
        }
    }
    
    //Otherwise, if Yoshi is not licking.
    else if (!licking) {
    
        //If Mario is crouched down or it's sliding down a slope.
        if ((obj_mario.duck) || (obj_mario.sliding)) {
        
            //If Yoshi is holding something on his mouth.
            if (mouthholder != noone) {
            
                //Set the sprite
                sprite_index = spr_yoshi_idle;
        
                //Do not animate
                image_speed = 0;
                image_index = 2;
            }
            
            //Otherwise, if Yoshi is not holding anything on his mouth.
            else if (mouthholder == noone) {
            
                //Set the sprite
                sprite_index = spr_yoshi_idle;
                
                //Do not animate
                image_speed = 0;
                image_index = 0;
            }
        }
        
        //Otherwise, if Mario is not crouched down.
        else {
    
            //If Mario is idle.
            if (obj_mario.state == cs_state_idle) {
            
                //If Yoshi is holding something on his mouth.
                if (mouthholder != noone) {
                
                    //Set the sprite
                    sprite_index = spr_yoshi_fullmouth;
                    
                    //Do not animate
                    image_speed = 0;
                    image_index = 0;
                }
                
                //Otherwise, if Yoshi is not holding anything on his mouth.
                else if (mouthholder == noone) {
                
                    //Set the sprite
                    sprite_index = spr_yoshi_normal;
                    
                    //Do not animate
                    image_speed = 0;
                    image_index = 0;                
                }
            }
            
            //Otherwise, if Mario is moving.
            else if (obj_mario.state == cs_state_walk) {
            
                //If Yoshi is holding something on his mouth.
                if (mouthholder != noone) {
                
                    //Set the sprite
                    sprite_index = spr_yoshi_fullmouth;
                    
                    //Animate
                    if (!collision_rectangle(obj_mario.bbox_left,obj_mario.bbox_bottom,obj_mario.bbox_right,obj_mario.bbox_bottom,obj_slippery,0,1))
                        image_speed = 0.065+abs(obj_mario.hspeed)/7.5;
                    else
                        image_speed = 0.130+abs(obj_mario.hspeed)/7.5;
                }
                
                //Otherwise, if Yoshi is not holding anything on his mouth.
                else if (mouthholder == noone) {
                
                    //Set the sprite
                    sprite_index = spr_yoshi_normal;
                    
                    //Animate
                    if (!collision_rectangle(obj_mario.bbox_left,obj_mario.bbox_bottom,obj_mario.bbox_right,obj_mario.bbox_bottom,obj_slippery,0,1))
                        image_speed = 0.065+abs(obj_mario.hspeed)/7.5;
                    else
                        image_speed = 0.130+abs(obj_mario.hspeed)/7.5;                    
                }
            }
            
            //Otherwise, if Mario is moving upwards.
            else if (obj_mario.state == cs_state_jump) {
            
                //If Yoshi is holding something on his mouth.
                if (mouthholder != noone) {
                
                    //Set the sprite
                    sprite_index = spr_yoshi_fullmouth_jump;
                    
                    //Do not animate
                    image_speed = 0;
                    
                    //Set the frame
                    if (obj_mario.vspeed &lt; 0)
                        image_index = 0;
                    else
                        image_index = 1;
                }
                
                //Otherwise, if Yoshi is not holding anything on his mouth.
                else if (mouthholder == noone) {
                
                    //Set the sprite
                    sprite_index = spr_yoshi_normal_jump;
                    
                    //Do not animate
                    image_speed = 0;
                    
                    //Set the frame
                    if (obj_mario.vspeed &lt; 0)
                        image_index = 0;
                    else
                        image_index = 1;                                    
                }
            }
        }
    }
}

//Otherwise, if Mario is warping through a pipe.
else if (instance_exists(obj_mario_warp)) {

    //If Mario is not moving vertically
    if (obj_mario_warp.vspeed == 0) {

        //If Yoshi is holding something on his mouth.
        if (mouthholder != noone) {
        
            //Set the sprite
            sprite_index = spr_yoshi_fullmouth;
            
            //Animate
            image_speed = 0.2;
        }
        
        //Otherwise, if Yoshi is not holding anything on his mouth.
        else if (mouthholder == noone) {
        
            //Set the sprite
            sprite_index = spr_yoshi_normal;
            
            //Animate
            image_speed = 0.2;               
        }
        
        //Set the depth
        depth = 10;
    }
    else {
    
        //If Yoshi is holding something on his mouth.
        if (mouthholder != noone) {
        
            //Set the sprite
            sprite_index = spr_yoshi_fullmouth_warp
            
            //Do not animate
            image_speed = 0;
            image_index = 0;
        }
        
        //Otherwise, if Yoshi is not holding anything on his mouth.
        else if (mouthholder == noone) {
        
            //Set the sprite
            sprite_index = spr_yoshi_normal_warp
            
            //Do not animate
            image_speed = 0;
            image_index = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mario when warping

//Temporary Mario value
var f = 0;
var m = spr_mario_small_ride;

//Set the sprite
switch (global.powerup) {

    case (cs_small): //Small
        m = spr_mario_small_ride; break;
    case (cs_big): //Big
        m = spr_mario_big_ride; break;
    case (cs_fire): //Fire
        m = spr_mario_fire_ride; break;
    case (cs_leaf): //Raccoon
        m = spr_mario_raccoon_ride; break;
}

//If the 'Up' key is being held or Yoshi is jumping.
if (obj_mario_warp.vspeed != 0) {

    //If Mario does have the raccoon powerup
    if (global.powerup == cs_leaf)
        f = 9;
    else
        f = 3;
}
else {

    if (global.powerup == cs_leaf)
        f = 4;
    else
        f = 1;
}

//Set the shader
if (obj_mario_warp.isflashing) {

    pal_swap_set(obj_mario_warp.pal_sprite, obj_mario_warp.pal)
}

//Draw Mario
draw_sprite_ext(m,f,round(x),round(y)+1,obj_mario_warp.image_xscale,1,0,c_white,1)

//Reset shader
if (obj_mario_warp.isflashing)
    shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mario

//Temporary Mario value
var f = 0;
var m = spr_mario_small_ride;

//Set the sprite
switch (global.powerup) {

    case (cs_small): //Small
        m = spr_mario_small_ride; break;
    case (cs_big): //Big
        m = spr_mario_big_ride; break;
    case (cs_fire): //Fire
        m = spr_mario_fire_ride; break;
    case (cs_leaf): //Raccoon
        m = spr_mario_raccoon_ride; break;
}

//If Yoshi is licking something.
if (licking) {

    //If Mario does have the raccoon powerup.
    if (global.powerup == cs_leaf) {
    
        //If the 'Up' key is being held or Yoshi is jumping.
        if (sprite_index == spr_yoshi_lick) {
        
            f = 0+obj_mario.wiggle/4;
            if (f &gt; 3)
                f = 3;
        }
        else {
        
            f = 4+obj_mario.wiggle/4;
            if (f &gt; 7)
                f = 7;
        }        
    }
    else {
    
        //If the 'Up' key is being held or Yoshi is jumping.
        if (sprite_index == spr_yoshi_lick)
            f = 0;
        else
            f = 1;
    }
}

//Otherwise, if Yoshi is not licking something.
else {

    //If Mario does have the raccoon powerup.
    if (global.powerup == cs_leaf) {
    
        //If Mario is crouched down or sliding down a slope
        if ((obj_mario.duck) || (obj_mario.sliding)) {
        
            f = 4+obj_mario.wiggle/4;
            if (f &gt; 7)
                f = 7;
        }
        else {
        
            f = 0+obj_mario.wiggle/4;
            if (f &gt; 3)
                f = 3;
        }   
    }

    else {
    
        //If Mario is crouched down or sliding down a slope
        if ((obj_mario.duck) || (obj_mario.sliding))
            f = 1;
        else
            f = 0;
    }
}

//Set the shader
if (obj_mario.isflashing) {

    pal_swap_set(obj_mario.pal_sprite, obj_mario.pal)
}

//Draw Mario
draw_sprite_ext(m,f,round(x),round(y)+1,obj_mario.xscale,1,0,c_white,obj_mario.image_alpha)

//Reset shader
if (obj_mario.isflashing)
    shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Abandon yoshi

with (instance_create(x,y,obj_yoshi_abandon)) {

    //Hereby the same colour
    colour = other.colour;

    //If Yoshi was holding an item on his mouth
    if (other.mouthholder != noone) {
    
        image_index = 1;
        alarm[1] = 16;
    }

    //Set the frame
    if (instance_exists(obj_mario))    
        xscale = obj_mario.xscale;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spit out an item

//Play 'Spit' sound
audio_play_sound(snd_spit, 0, false);

//Spit out the item
if (obj_mario.duck) || (obj_mario.sliding) {

    //Create up an item
    with (instance_create(x-8+(10*obj_mario.xscale),y-12,mouthholder)) {
    
        //Use the correct sprite
        sprite_index = other.mouthsprite;
        
        //Set the horizontal speed
        hspeed = 0.5*obj_mario.xscale;
    }
}
else {

    //Create up an item
    with (instance_create(x-8+(10*obj_mario.xscale),y-16,mouthholder)) {
    
        //Use the correct sprite
        sprite_index = other.mouthsprite;
        
        //If the eaten item is a throwable brick.
        if (sprite_index == spr_throwblock_th) {
            
            //Set the horizontal speed.
            hspeed = 3*obj_mario.xscale;
            
            //Set the animation speed
            image_speed = 1;
            
            //Get thrown
            ready = 1;
            
            //If the object is in contact with a solid.
            if (place_meeting(x,y,obj_solid))
                event_user(0);
        }
        else {
        
            //If the eaten item is a POW block.
            if (sprite_index = spr_powblock) {
            
                kicked = true;
            }

            //If the eaten item is not overlapping a solid.
            if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
            
                //Set the motion when swimming.
                if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,0,0)) {
                
                    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,0))
                        hspeed = obj_mario.hspeed+0.75*obj_mario.xscale;
                    else
                        hspeed = 1*obj_mario.xscale;                
                }
                
                //Otherwise, set the motion when NOT swimming.
                else {
                
                    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,0))
                        hspeed = obj_mario.hspeed+1.5*obj_mario.xscale;
                    else
                        hspeed = 2*obj_mario.xscale;                
                }
            }
            
            //Make the item get not stuck on a solid.
            else
                inwall = true;
        }
    }
}

//Reset mouth item
mouthholder = noone;

//Reset item sprite
mouthsprite = noone;

//Licking
licking = 1;

//Stop licking
alarm[2] = 5;

//Lick animation
anim = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember carried item

global.ycolour = colour;
global.carrieditem = mouthholder;
global.carriedsprite = mouthsprite;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Yoshi

//If Mario exists
if (instance_exists(obj_mario)) {

    //Set the shader
    if (colour &gt; 0) {
    
        pal_swap_set(pal_sprite, colour);
    }
    
    //Draw yoshi
    draw_sprite_ext(sprite_index,image_index,round(x),y+1,obj_mario.xscale,1,0,c_white,1);
    
    //Reset shader
    shader_reset();
    
    //Draw Mario
    event_user(10);
}

//Otherwise, If Mario exists and it's warping through a pipe.
else if (instance_exists(obj_mario_warp)) {

    //If Mario is visible.
    if (obj_mario_warp.speed != 2) {

        //If Mario is not moving vertically
        if (obj_mario_warp.vspeed == 0) {
        
            //Set the shader
            if (colour &gt; 0) {
            
                pal_swap_set(pal_sprite, colour);
            }
            
            //Draw yoshi
            draw_sprite_ext(sprite_index,image_index,round(x),y+1,obj_mario_warp.image_xscale,1,0,c_white,1);
            
            //Reset shader
            shader_reset();    
        }
        
        //Draw Mario
        event_user(11);
        
        //If Mario is moving vertically.
        if (obj_mario_warp.vspeed != 0) {
        
            //Set the shader
            if (colour &gt; 0) {
            
                pal_swap_set(pal_sprite, colour);
            }
            
            //Draw yoshi
            draw_sprite_ext(sprite_index,image_index,round(x),y+1,obj_mario_warp.image_xscale,1,0,c_white,1);
            
            //Reset shader
            shader_reset();        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dismount Yoshi

if (keyboard_check(vk_up)) {

    //Dismount yoshi
    global.yoshi = 0;
    
    //With Mario
    with (obj_mario) {
    
        //Make Mario visible
        visible = 1; 
        
        //Do not hold
        holding = 0; 
        
        //Delay leaf powerup effect
        dismount = 16;
    
        //If Mario is not moving vertically
        if (state &lt; cs_state_jump) {
        
            //Play 'Spin' sound.
            audio_play_sound(snd_spin, 0, false);
            
            //Set 'Spin' mode
            spin = true;
            
            //Set horizontal speed
            hspeed = 1*(xscale*-1);
        }
        
        //Otherwise, if Mario is moving vertically.
        else {
        
            //Play 'Jump' sound.
            audio_play_sound(snd_jump, 0, false);
            
            //Do not set 'Spin' mode
            spin = false;                
        }
    
        //Make the player able to vary the jump.
        jumping = 1;           
        
        //Set the vertical speed.
        vspeed = -3.4675;              
        
        //Switch to jump state
        state = cs_state_jump;              
    }
    
    //Abandon yoshi
    event_user(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
