<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_small_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_playermask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///It's a me, Mario!

//Initialize Mario's variables.
mario_create();

//Handle Mario's palette.
alarm[4] = 1;

//Handle Mario's particle effects.
alarm[5] = 1;
alarm[6] = 1;
alarm[8] = 1;

//Handle Mario's palettes
pal_sprite = spr_palette_mario;
pal = 0;

//Enable / Disable Mario's jump. (Default is 1)
//0:    Disable
//1:    Enable
canjump = 1;

//Make Mario able to climb or not able to climb anything. (Default is 1)
//0:    Disable
//1:    Enable
canclimb = 1;

//Enable / Disable holding stuff. (Default is 1)
//0:    Disable
//1:    Enable
canhold = 1;

//Enable / Disable swimming. (Default is 1)
//0:    Disable
//1:    Enable
canswim = 1;

//Enable / Disable crouching down. (Default is 1)
//0:    Disable
//1:    Enable
canduck = 1;

//Enable / Disable sliding down slopes. (Default is 1)
//0:    Disable
//1:    Enable
canslide = 1;

//Enable / Disable flying. (Default is 0)
//0: Disable
//1: Enable
canfly = 1;

//Enable / Disable special attacks. (Default is 0)
//0: Disable
//1: Enable
special_enabled = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop these sounds from playing

//Stop 'Skid' sound.
if (audio_is_playing(snd_skid))
    audio_stop_sound(snd_skid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End net smack sequence

netsmack = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop kicking / tossing

kicking = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart flying ability

//Allow Mario to fly again.
flying = false;

//Reset P-Meter
pmeter = 0;

//Make Mario walk
run = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle powerup specific projectiles when spinning.

//If Mario is spinning.
if ((spin) &amp;&amp; (global.yoshi == 0)) {

    //Fire Mario
    if (global.powerup == cs_fire) {
    
        //Set firing animation
        firing = 9;
        
        //Throw a fireball.
        with (instance_create(x,y,obj_fireball)) {
        
            vspeed = 3;
            hspeed = 3*other.xscale;
        }
    }
    
    //Change facing direction.
    if (global.powerup &gt;= cs_fire)
        xscale = -xscale;
}

//Repeat the process.
alarm[8] = 16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle powerup specific projectiles

//Fire Mario
if (global.powerup == cs_fire) {

    //If the 'Up' key is being pressed.
    if (keyboard_check(vk_up)) 
    &amp;&amp; (!spin) 
    &amp;&amp; (special == 0) 
    &amp;&amp; (special_enabled == true) {
    
        //Set firing direction
        firing = 1;
        
        //Use special
        special = 1;
        
        //Reset animation
        image_speed = 0;
        image_index = 0;
    }

    //Otherwise, use default attack.
    else {
    
        //If there's less than 2 fireballs on the view.
        if (instance_number(obj_fireball) &lt; 2) {
        
            //Set firing animation
            firing = 9;
            
            //Throw a fireball.
            with (instance_create(x,y,obj_fireball)) {
            
                vspeed = 3;
                hspeed = 3*other.xscale;
            }
        }
    }
}

//Raccoon Mario
if (global.powerup == cs_leaf)
&amp;&amp; (!spin)
&amp;&amp; (instance_number(obj_spinner) &lt; 1)
    instance_create(0,0,obj_spinner);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a bubble if Mario is swimming.

//Repeat
alarm[6] = 45+random_range(15,-15);

//If Mario is swimming.
if (swimming)
    instance_create(x,bbox_top,obj_bubble);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Mario's particle effects

//If Mario is skidding
if (skidnow) {

    if (vspeed != 0) {
    
        alarm[5] = 1;
        exit;
    }
    alarm[5] = 4;
    with (instance_create(x,bbox_bottom,obj_smoke))
        sprite_index = spr_smoke_skid;
}

//Otherwise, if Mario is sliding down a slope.
else if (sliding) {

    if (vspeed != 0) {
    
        alarm[5] = 1;
        exit;
    }
    alarm[5] = 4;
    with (instance_create(x,bbox_bottom,obj_smoke))
        sprite_index = spr_smoke_skid;    
}
else {

    //If Mario does have the raccoon powerup and the p-meter is full.
    if ((global.powerup == cs_leaf) &amp;&amp; (pmeter &gt;= 112)) {
        
        //Repeat the process
        alarm[5] = 4;
        
        //Create effect        
        if (mask_index == spr_playermask) {
        
            effect = instance_create(x-8+random(round(16)),y+random_range(0,16),obj_sparkle);
            with (effect) {
            
                sprite_index = spr_sparkle_trail;
                image_speed = 0.1;
            }
        }
        else {
        
            effect = instance_create(x-8+random(round(16)),y+random_range(-6,16),obj_sparkle);
            with (effect) {
            
                sprite_index = spr_sparkle_trail;
                image_speed = 0.1;
            }
        }
    }
    else
        alarm[5] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Mario's flashing effect.

//Make Mario flash if he's under the effects of the starman.
if (instance_exists(obj_invincibility)) {

    //Make Mario flash.
    isflashing += 0.1;
    if (isflashing &gt; 6)
        isflashing = 1;
    
    //Repeat the process.
    if (obj_invincibility.alarm[0] &gt; 0)
        alarm[4] = 1;
    else
        alarm[4] = 4;
}
else {

    isflashing = 0;
    alarm[4] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stops Mario from turning while holding an item

turning = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario able to climb again

canhang = 0;
canturn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario blink when damaged.

//If Mario is still invulnerable to all hazards.
if (invulnerable) {

    //Repeat the process.
    alarm[1] = 1;
    
    //Change alpha
    image_alpha = !image_alpha;
}

//Otherwise, set up default alpjha
else
    image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario vulnerable to all hazards

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Mario's animation.

//If Mario is crouched down.
if (duck == true) {
    
    //Set up the sprite.
    if (global.healthmode == false) { //If health mode is NOT enabled.
    
        //Check up the powerup.
        switch (global.powerup) {
        
            case (cs_small): //Small
                sprite_index = spr_mario_small_crouch; break;
            case (cs_big): //Big
                sprite_index = spr_mario_big_crouch; break;
            case (cs_fire): //Fire
                sprite_index = spr_mario_fire_crouch; break;
            case (cs_leaf): { //Raccoon
            
                //Check if Mario is holding something.
                switch (holding) {
                
                    case (0): //No hold
                        sprite_index = spr_mario_raccoon_crouch; break;
                    case (1): //SMW style holding.
                        sprite_index = spr_mario_raccoon_crouchhold; break;
                    case (2): //SMB2 style holding.
                        sprite_index = spr_mario_raccoon_crouchcarry; break;                        
                }
            } break;
        }
    }
    
    //Otherwise, if health mode is enabled.
    else if (global.healthmode == true) {
    
        //If Mario does NOT have any powerup.
        if (global.powerup &lt; cs_fire) {
        
            //Big
            sprite_index = spr_mario_big_crouch;
        }
        
        //Otherwise, if he does have a powerup.
        else {
        
            //Check up the powerup.
            switch (global.powerup) {
            
                case (cs_fire): //Fire
                    sprite_index = spr_mario_fire_crouch; break;
                case (cs_leaf): { //Raccoon
                
                    //Check if Mario is holding something.
                    switch (holding) {
                    
                        case (0): //No hold
                            sprite_index = spr_mario_raccoon_crouch; break;
                        case (1): //SMW style holding.
                            sprite_index = spr_mario_raccoon_crouchhold; break;
                        case (2): //SMB2 style holding.
                            sprite_index = spr_mario_raccoon_crouchcarry; break;                        
                    }
                } break;
            }            
        }
    }
        
    //Do not animate
    image_speed = 0;
    if (global.powerup != cs_leaf)   
        image_index = holding;
    else {
    
        //If Mario is not moving vertically.
        if (vspeed == 0)
            image_index = 0;
        else
            image_index = 1+(wiggle/4);
    }
    
    //Do not skid
    skidnow = 0;    
    
    //Set the mask
    mask_index = spr_playermask;
    
    //Stop 'Skid' sound
    if (audio_is_playing(snd_skid))
        audio_stop_sound(snd_skid);
}

//Otherwise, use default animation
else if (duck == false) {

    //Set up the sprite.
    if (global.healthmode == false) { //If health mode is NOT enabled.
    
        //Check up the powerup.
        switch (global.powerup) {
        
            case (cs_small): //Small
                mario_small(); break;
            case (cs_big): //Big
                mario_big(); break;
            case (cs_fire): //Fire
                mario_fire(); break;
            case (cs_leaf): //Raccoon
                mario_raccoon(); break;
        }
    }
    
    //Otherwise, if health mode is enabled.
    else if (global.healthmode == true) {
    
        //If Mario does NOT have any powerup.
        if (global.powerup &lt; cs_fire) {
        
            //Big
            mario_big();
        }
        
        //Otherwise, if he does have a powerup.
        else {
        
            //Check up the powerup.
            switch (global.powerup) {
            
                case (cs_fire): //Fire
                    mario_fire(); break;
                case (cs_leaf): //Raccoon
                    mario_raccoon(); break;
            }            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Mario's physics, movement and palette

//Update Mario's palette
mario_palette();

//Set up Mario's physics
mario_physics();

//Set up the appropiate behaviour of each ability.
if (!swimming) { //If Mario is not swimming.

    //If Mario is not sliding down a slope.
    if (!sliding) {
    
        //If Mario is not climbing.
        if (state != cs_state_climb) {
        
            //Use the main script.
            mario_behaviour();
            
            //Increment / Decrement P-Meter
            mario_run();
        }   
        
        //Otherwise, if Mario is climbing.
        else {
        
            //If Mario is not climbing a la SMB. (Side)
            if (climbstyle = 0) {
            
                //Use the default climbing script.
                mario_behaviour_climb();
            }
                
            //Otherwise, if Mario is climbing a la SMB.
            else if (climbstyle = 1) {
            
                //Use the alternate climbing script.
                mario_behaviour_climb_alt();
            }
            
            //Decrement P-Meter
            flying = false;
            run = false;
            if (pmeter &gt; 0)
                pmeter--
        }
    }
    
    //Otherwise, if Mario is sliding down a slope.
    else if (sliding) {
    
        //Use the sliding script
        mario_behaviour_slide();
        
        //Decrement P-Meter
        flying = false;
        run = false;
        if (pmeter &gt; 0)
            pmeter--
    }    
}

//Otherwise, if it's swimming.
else if (swimming) {

    //Use the swimming script
    mario_behaviour_water();
    
    //Decrement P-Meter
    flying = false;
    run = false;
    if (pmeter &gt; 0)
        pmeter--
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset values (When landing)

//Allow Mario to jump again.
jumping = 0;
    
//Reset spin jump
spin = false;
    
//Reset combo counter if not sliding.
if (!sliding)
    combo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario toss something.

kicking = 2;
alarm[10] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario kick something.

kicking = 1;
alarm[10] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default bounce on enemy script

bounce();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default damage script

if (invulnerable == false)
    damage();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a fireball

if (sprite_index = spr_mario_fire_shoot2) {

    //Enable special again after 4 seconds
    special = -240;
    
    //Enable gravity
    disablegrav = 0;
    
    //Create special fireball
    if (xscale == -1)
        instance_create(bbox_left-16,y,obj_fireball_double);
    else if (xscale = 1)
        instance_create(bbox_right+16,y,obj_fireball_double);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Mario

//Set up palette shader
if (isflashing &gt; 0) {

    pal_swap_set(pal_sprite,pal);
}

//Draw Mario
draw_sprite_ext(sprite_index,-1,x,y+1,xscale,1,0,c_white,image_alpha);

//Reset the shader
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
