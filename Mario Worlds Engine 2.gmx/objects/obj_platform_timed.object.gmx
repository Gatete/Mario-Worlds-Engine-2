<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_platform_timed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_platformparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timed platform

/*
//  This item uses creation code.
//
//  time = How many seconds will the platform move before it falls.
*/

//Default values
time = 1;

//Do not animate
image_speed = 0;
image_index = 0;

//Whether this platform is moving
ready = 0;

//Remember prev time
prevtime = 0;

//Set the direction
if (place_meeting(x,y,obj_up))
    direction = 90;
else if (place_meeting(x,y,obj_down))
    direction = 270;
else if (place_meeting(x,y,obj_left))
    direction = 180
else
    direction = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decrement time

time--;
if (time == 0) { //If the timer hits 0.

    //Set the gravity
    gravity = 0.15;
    
    //Platform is falling
    ready = 2;
}
else //Otherwise, decrement again.
    alarm[0] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's platform logic

//If Mario overlaps the platform.
if (ready == 0)
&amp;&amp; (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_mario,0,0)) 
&amp;&amp; (obj_mario.y &lt; y-11)
&amp;&amp; (obj_mario.state &lt; cs_state_jump) {

    //Remember previous time
    prevtime = time;
    
    //Move
    ready = 1;    
    
    //Start moving
    speed = 1;
    
    //Start timer
    alarm[0] = 60;
}

//Check if this platform is falling and move it to the start position when it's origin is outside the view.
if ((ready == 2) &amp;&amp; (bbox_top &gt; room_height))
    ready = 3;
else if (ready == 3) {

    //If the platform start position is outside the view.
    if (xstart &lt; view_xview[0]-64)
    || (xstart &gt; view_xview[0]+view_wview[0])
    || (ystart &lt; view_yview[0]-16)
    || (ystart &gt; view_yview[0]+view_hview[0]) {
    
        //Create a new platform
        with (instance_create(xstart,ystart,obj_platform_timed))
            time = other.prevtime;
        
        //Destroy
        instance_destroy();
    }
}

//Cap vertical speed
if (vspeed &gt; 2.5)
    vspeed = 2.5;
    
//If Mario is above this platform
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the platform

draw_sprite(sprite_index,-1,round(x),round(y));
if (time)
    draw_sprite(sprite_index,time,round(x),round(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
